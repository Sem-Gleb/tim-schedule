import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import calendar
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import get_column_letter
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–£—á–µ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
    page_icon="üìÖ",
    layout="wide"
)


class EducationalScheduleApp:
    def __init__(self):
        self.month_names_ru = {
            1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
            5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
            9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
        }

        # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ –†–æ—Å—Å–∏–∏ –ø–æ –≥–æ–¥–∞–º
        self.holidays = {
            2025: ['2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-06',
                   '2025-01-07', '2025-01-08', '2025-02-23', '2025-03-08', '2025-05-01',
                   '2025-05-02', '2025-05-08', '2025-05-09', '2025-06-12', '2025-06-13',
                   '2025-11-03', '2025-11-04'],
            2026: ['2026-01-01', '2026-01-02', '2026-01-05', '2026-01-06', '2026-01-07',
                   '2026-01-08', '2026-01-09', '2026-02-23', '2026-03-09', '2026-05-01',
                   '2026-05-09', '2026-05-11', '2026-06-12', '2026-11-04'],
            2027: ['2027-01-01', '2027-01-04', '2027-01-05', '2027-01-06', '2027-01-07',
                   '2027-01-08', '2027-02-22', '2027-02-23', '2027-03-08', '2027-05-03',
                   '2027-05-10', '2027-06-14', '2027-11-04'],
            2028: ['2028-01-03', '2028-01-04', '2028-01-05', '2028-01-06', '2028-01-07',
                   '2028-02-23', '2028-03-08', '2028-05-01', '2028-05-09', '2028-06-12',
                   '2028-11-04']
        }

    def get_monday_of_week(self, date):
        days_since_monday = date.weekday()
        return date - timedelta(days=days_since_monday)

    def is_holiday(self, date):
        year = date.year
        date_str = date.strftime('%Y-%m-%d')
        return date_str in self.holidays.get(year, [])

    def is_working_day(self, date):
        return date.weekday() < 5 and not self.is_holiday(date)

    def calculate_academic_weeks(self, start_date, weeks_float):
        current_date = start_date
        working_days_needed = int(weeks_float * 5)
        working_days_count = 0
        schedule_days = []

        while working_days_count < working_days_needed:
            if self.is_working_day(current_date):
                schedule_days.append(current_date)
                working_days_count += 1
            current_date += timedelta(days=1)

        while not self.is_working_day(current_date):
            current_date += timedelta(days=1)

        return schedule_days, current_date

    def generate_schedule(self, periods_df, start_year):
        start_date = datetime(start_year, 9, 1)
        current_date = self.get_monday_of_week(start_date)

        generated_schedule = []

        for _, row in periods_df.iterrows():
            year = int(row['–ì–æ–¥'])
            semester = int(row['–°–µ–º–µ—Å—Ç—Ä'])
            activity_type = row['–¢–∏–ø']
            weeks = float(row['–ù–µ–¥–µ–ª–∏'])

            period_days, next_date = self.calculate_academic_weeks(current_date, weeks)

            period_info = {
                'year': year,
                'semester': semester,
                'type': activity_type,
                'weeks': weeks,
                'start_date': current_date,
                'end_date': period_days[-1] if period_days else current_date,
                'days': period_days
            }

            generated_schedule.append(period_info)
            current_date = next_date

        return generated_schedule

    def create_excel_file(self, generated_schedule, start_year, program_type):
        wb = Workbook()
        program_years = 2 if "–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞" in program_type else 3

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True)
        thin_border = Border(left=Side(style='thin'), right=Side(style='thin'),
                             top=Side(style='thin'), bottom=Side(style='thin'))

        activity_fills = {
            '–¢': PatternFill(start_color="90EE90", end_color="90EE90", fill_type="solid"),
            '–ü': PatternFill(start_color="87CEEB", end_color="87CEEB", fill_type="solid"),
            '–ü–ê': PatternFill(start_color="FFE4B5", end_color="FFE4B5", fill_type="solid"),
            '–ì–ò–ê': PatternFill(start_color="DDA0DD", end_color="DDA0DD", fill_type="solid"),
            '–ö': PatternFill(start_color="F0E68C", end_color="F0E68C", fill_type="solid")
        }

        weekend_fill = PatternFill(start_color="E6E6FA", end_color="E6E6FA", fill_type="solid")
        holiday_fill = PatternFill(start_color="FFB6C1", end_color="FFB6C1", fill_type="solid")

        # –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
        for academic_year in range(program_years):
            actual_year = start_year + academic_year

            if academic_year == 0:
                ws = wb.active
                ws.title = f"{actual_year}-{actual_year + 1}"
            else:
                ws = wb.create_sheet(f"{actual_year}-{actual_year + 1}")

            self.create_academic_year_calendar(ws, actual_year, header_font,
                                               weekend_fill, holiday_fill, activity_fills,
                                               thin_border, generated_schedule)

        # –õ–∏—Å—Ç —Å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        legend_ws = wb.create_sheet("–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è")
        self.create_legend_sheet(legend_ws, header_font, activity_fills,
                                 weekend_fill, holiday_fill, thin_border)

        return wb

    def create_academic_year_calendar(self, ws, start_year, header_font,
                                      weekend_fill, holiday_fill, activity_fills,
                                      thin_border, generated_schedule):

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws.merge_cells('A1:AH1')
        ws['A1'] = f"–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —É—á–µ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ {start_year}-{start_year + 1} –≥."
        ws['A1'].font = Font(size=16, bold=True)
        ws['A1'].alignment = Alignment(horizontal='center')

        # –ú–µ—Å—è—Ü—ã —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ (—Å–µ–Ω—Ç—è–±—Ä—å-–∞–≤–≥—É—Å—Ç)
        academic_months = [(start_year, m) for m in range(9, 13)] + [(start_year + 1, m) for m in range(1, 9)]

        # –°—Ç—Ä–æ–∫–∞ 2 - –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        current_col = 2

        for year, month in academic_months:
            month_name = self.month_names_ru[month]
            cal = calendar.monthcalendar(year, month)
            month_weeks = len(cal)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
            if month_weeks > 1:
                ws.merge_cells(f'{get_column_letter(current_col)}2:{get_column_letter(current_col + month_weeks - 1)}2')

            cell = ws.cell(row=2, column=current_col)
            cell.value = month_name
            cell.font = header_font
            cell.alignment = Alignment(horizontal='center')
            cell.border = thin_border

            current_col += month_weeks

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']

        ws['A2'] = '–ú–µ—Å'
        ws['A2'].font = header_font
        ws['A2'].alignment = Alignment(horizontal='center')
        ws['A2'].border = thin_border

        for row_idx, day_name in enumerate(days_of_week, 3):
            cell = ws['A{}'.format(row_idx)]
            cell.value = day_name
            cell.font = header_font
            cell.alignment = Alignment(horizontal='center')
            cell.border = thin_border

        ws['A10'] = '–ù–µ–¥'
        ws['A10'].font = header_font
        ws['A10'].alignment = Alignment(horizontal='center')
        ws['A10'].border = thin_border

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
        current_col = 2
        week_number = 1

        for year, month in academic_months:
            cal = calendar.monthcalendar(year, month)

            for week_idx, week in enumerate(cal):
                col = current_col + week_idx

                # –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                ws.cell(row=10, column=col).value = week_number
                ws.cell(row=10, column=col).alignment = Alignment(horizontal='center')
                ws.cell(row=10, column=col).border = thin_border
                week_number += 1

                # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
                for day_idx, day in enumerate(week):
                    row = 3 + day_idx
                    cell = ws.cell(row=row, column=col)
                    cell.border = thin_border

                    if day == 0:
                        cell.value = ""
                        cell.fill = PatternFill(start_color="F5F5F5", end_color="F5F5F5", fill_type="solid")
                    else:
                        date = datetime(year, month, day)
                        cell.value = day
                        cell.alignment = Alignment(horizontal='center')

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
                        if self.is_holiday(date):
                            cell.fill = holiday_fill
                        elif date.weekday() >= 5:
                            cell.fill = weekend_fill
                        else:
                            activity_type = self.get_activity_for_date(date, generated_schedule)
                            if activity_type and activity_type in activity_fills:
                                cell.fill = activity_fills[activity_type]
                                cell.value = f"{day}\n{activity_type}"
                                cell.alignment = Alignment(horizontal='center', vertical='center')
                                cell.font = Font(size=9)

            current_col += len(cal)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        ws.column_dimensions['A'].width = 6
        for col in range(2, current_col):
            ws.column_dimensions[get_column_letter(col)].width = 5

        for row in range(3, 10):
            ws.row_dimensions[row].height = 25

    def get_activity_for_date(self, date, generated_schedule):
        for period in generated_schedule:
            if date in period['days']:
                return period['type']
        return None

    def create_legend_sheet(self, ws, header_font, activity_fills, weekend_fill, holiday_fill, thin_border):
        ws['A1'] = "–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è"
        ws['A1'].font = Font(size=16, bold=True)

        ws['A3'] = "–¢–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π:"
        ws['A3'].font = header_font

        activity_names = ['–¢', '–ü', '–ü–ê', '–ì–ò–ê', '–ö']
        activity_descriptions = ['–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–ü—Ä–∞–∫—Ç–∏–∫–∞', '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è',
                                 '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∏—Ç–æ–≥–æ–≤–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è', '–ö–∞–Ω–∏–∫—É–ª—ã']

        for i, name in enumerate(activity_names):
            col = chr(66 + i)
            ws[f'{col}4'] = name
            ws[f'{col}4'].font = header_font
            ws[f'{col}4'].fill = activity_fills[name]
            ws[f'{col}4'].border = thin_border
            ws[f'{col}4'].alignment = Alignment(horizontal='center')

            ws[f'{col}5'] = activity_descriptions[i]
            ws[f'{col}5'].border = thin_border
            ws[f'{col}5'].alignment = Alignment(horizontal='center')

        ws['A7'] = "–ü—Ä–æ—á–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:"
        ws['A7'].font = header_font

        ws['B8'] = "–í—ã—Ö–æ–¥–Ω—ã–µ"
        ws['B8'].fill = weekend_fill
        ws['B8'].border = thin_border
        ws['B8'].alignment = Alignment(horizontal='center')

        ws['C8'] = "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏"
        ws['C8'].fill = holiday_fill
        ws['C8'].border = thin_border
        ws['C8'].alignment = Alignment(horizontal='center')

        for col_letter in ['A', 'B', 'C', 'D', 'E', 'F']:
            ws.column_dimensions[col_letter].width = 20


# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    st.title("–£—á–µ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")

    app = EducationalScheduleApp()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    col1, col2, col3, col4 = st.columns([2, 2, 2, 2])

    with col1:
        program_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã", ["–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞ (2 –≥–æ–¥–∞)", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ (3 –≥–æ–¥–∞)"])

    with col2:
        start_year = st.selectbox("–ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥", [2025, 2026, 2027])

    with col3:
        if st.button("–ü—Ä–∏–º–µ—Ä –æ—Ä–¥–∏–Ω–∞—Ç—É—Ä—ã"):
            st.session_state.periods_data = [
                {"–ì–æ–¥": 1, "–°–µ–º–µ—Å—Ç—Ä": 1, "–¢–∏–ø": "–¢", "–ù–µ–¥–µ–ª–∏": 10},
                {"–ì–æ–¥": 1, "–°–µ–º–µ—Å—Ç—Ä": 1, "–¢–∏–ø": "–ü", "–ù–µ–¥–µ–ª–∏": 12},
                {"–ì–æ–¥": 1, "–°–µ–º–µ—Å—Ç—Ä": 1, "–¢–∏–ø": "–ü–ê", "–ù–µ–¥–µ–ª–∏": 1},
                {"–ì–æ–¥": 1, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–¢", "–ù–µ–¥–µ–ª–∏": 4},
                {"–ì–æ–¥": 1, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–ü", "–ù–µ–¥–µ–ª–∏": 16},
                {"–ì–æ–¥": 1, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–ü–ê", "–ù–µ–¥–µ–ª–∏": 1},
                {"–ì–æ–¥": 1, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–ö", "–ù–µ–¥–µ–ª–∏": 6},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 1, "–¢–∏–ø": "–¢", "–ù–µ–¥–µ–ª–∏": 10},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 1, "–¢–∏–ø": "–ü", "–ù–µ–¥–µ–ª–∏": 12},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 1, "–¢–∏–ø": "–ü–ê", "–ù–µ–¥–µ–ª–∏": 1},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–¢", "–ù–µ–¥–µ–ª–∏": 9},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–ü", "–ù–µ–¥–µ–ª–∏": 8},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–ü–ê", "–ù–µ–¥–µ–ª–∏": 1},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–ì–ò–ê", "–ù–µ–¥–µ–ª–∏": 2},
                {"–ì–æ–¥": 2, "–°–µ–º–µ—Å—Ç—Ä": 2, "–¢–∏–ø": "–ö", "–ù–µ–¥–µ–ª–∏": 6}
            ]

    with col4:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å"):
            st.session_state.periods_data = []

    st.divider()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if 'periods_data' not in st.session_state:
        st.session_state.periods_data = []

    # –†–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–æ–≤
    st.subheader("–ü–µ—Ä–∏–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è")

    if st.session_state.periods_data:
        edited_df = st.data_editor(
            pd.DataFrame(st.session_state.periods_data),
            use_container_width=True,
            num_rows="dynamic",
            column_config={
                "–ì–æ–¥": st.column_config.SelectboxColumn("–ì–æ–¥", options=[1, 2, 3]),
                "–°–µ–º–µ—Å—Ç—Ä": st.column_config.SelectboxColumn("–°–µ–º–µ—Å—Ç—Ä", options=[1, 2]),
                "–¢–∏–ø": st.column_config.SelectboxColumn("–¢–∏–ø", options=["–¢", "–ü", "–ü–ê", "–ì–ò–ê", "–ö"]),
                "–ù–µ–¥–µ–ª–∏": st.column_config.NumberColumn("–ù–µ–¥–µ–ª–∏", min_value=0.1, max_value=52.0, step=0.1,
                                                        format="%.1f")
            }
        )
        st.session_state.periods_data = edited_df.to_dict('records')
    else:
        st.info("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–∏–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–º–µ—Ä")

    st.divider()

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    col1, col2 = st.columns(2)

    with col1:
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", type="primary"):
            if st.session_state.periods_data:
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."):
                    periods_df = pd.DataFrame(st.session_state.periods_data)
                    generated_schedule = app.generate_schedule(periods_df, start_year)
                    st.session_state.generated_schedule = generated_schedule
                    st.session_state.start_year = start_year
                    st.session_state.program_type = program_type

                st.success(f"–ì—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤! –°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(generated_schedule)}")
            else:
                st.error("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–∏–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è")

    with col2:
        if 'generated_schedule' in st.session_state:
            wb = app.create_excel_file(
                st.session_state.generated_schedule,
                st.session_state.start_year,
                st.session_state.program_type
            )

            buffer = io.BytesIO()
            wb.save(buffer)
            buffer.seek(0)

            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å Excel",
                data=buffer,
                file_name=f"–≥—Ä–∞—Ñ–∏–∫_{st.session_state.start_year}-{st.session_state.start_year + 1}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.button("–°–∫–∞—á–∞—Ç—å Excel", disabled=True)

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    if 'generated_schedule' in st.session_state:
        st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")

        preview_data = []
        for period in st.session_state.generated_schedule:
            preview_data.append({
                "–ì–æ–¥": period['year'],
                "–°–µ–º–µ—Å—Ç—Ä": period['semester'],
                "–¢–∏–ø": period['type'],
                "–ù–µ–¥–µ–ª–∏": f"{period['weeks']:.1f}",
                "–ù–∞—á–∞–ª–æ": period['start_date'].strftime('%d.%m.%Y'),
                "–ö–æ–Ω–µ—Ü": period['end_date'].strftime('%d.%m.%Y'),
                "–î–Ω–µ–π": len(period['days'])
            })

        st.dataframe(pd.DataFrame(preview_data), use_container_width=True, hide_index=True)


if __name__ == "__main__":
    main()